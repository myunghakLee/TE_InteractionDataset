# -*- coding: utf-8 -*-
"""computeTE_interaction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZTWfpXyGY-UMBbR7oyNs4LASfLvfCXQz
"""

import os


# +
# # !pip install jpype1
# -

from sys import platform
import glob
import numpy as np
# from src.utils import *
import pickle
import matplotlib.pyplot as plt
import pandas as pd

import csv
from tqdm import tqdm

from jpype import *
import random
import math

# Setting Java for TE compute

jarLocation = "./infodynamics.jar"
if not os.path.isfile(jarLocation):
    exit("infodynamics.jar not found (expected at " + os.path.abspath(
        jarLocation) + ") - are you running from demos/python?")
# Start the JVM (add the "-Xmx" option with say 1024M if you get crashes due to not enough memory space)
startJVM(getDefaultJVMPath(), "-ea", "-Djava.class.path=" + jarLocation)

# Create a Kraskov TE calculator:
teCalcClass = JPackage("infodynamics.measures.continuous.kraskov").TransferEntropyCalculatorMultiVariateKraskov

teCalc = teCalcClass()

# Set properties for auto-embedding of both source and destination
#  using the Ragwitz criteria:
#  a. Auto-embedding method
teCalc.setProperty(teCalcClass.PROP_AUTO_EMBED_METHOD, teCalcClass.AUTO_EMBED_METHOD_RAGWITZ)
#teCalc.setProperty(teCalcClass.PROP_AUTO_EMBED_METHOD,  teCalcClass.AUTO_EMBED_METHOD_MAX_CORR_AIS_DEST_ONLY)
#  b. Search range for embedding dimension (k) and delay (tau)
teCalc.setProperty(teCalcClass.PROP_K_SEARCH_MAX, "6")
teCalc.setProperty(teCalcClass.PROP_TAU_SEARCH_MAX, "6")

# Since we're auto-embedding, no need to supply k, l, k_tau, l_tau here:
teCalc.initialise(2, 2)

def computeTE(data1, data2, source, desc):
    if data2:    
        xy_source = data1[source]["xy"]
        time_source = data1[source]["time"]

        xy_desc = data2[desc]["xy"]
        time_desc = data2[desc]["time"]

    else:
        xy_source = data1[source]["xy"]
        time_source = data1[source]["time"]

        xy_desc = data1[desc]["xy"]
        time_desc = data1[desc]["time"]

    start_t = max(time_source[0], time_desc[0])
    end_t = min(time_source[-1], time_desc[-1])

    print(f'time: {start_t} - {end_t}')

    data_source = xy_source[time_source.index(start_t) : time_source.index(end_t)]
    data_desc = xy_desc[time_desc.index(start_t) : time_desc.index(end_t)]

    print(f'{source}: {data_source}')
    print(f'{desc}: {data_desc}', end='\n')

    teCalc.setObservations(data_source, data_desc)
    teSourceToDesc1 = teCalc.computeAverageLocalOfObservations()

    optimisedK    = str(teCalc.getProperty(teCalcClass.K_PROP_NAME))
    optimisedKTau = str(teCalc.getProperty(teCalcClass.K_TAU_PROP_NAME))
    optimisedL    = str(teCalc.getProperty(teCalcClass.L_PROP_NAME))
    optimisedLTau = str(teCalc.getProperty(teCalcClass.L_TAU_PROP_NAME))

    print(optimisedK, optimisedKTau, optimisedL, optimisedLTau)
    print(f'{source} -> {desc} : {teSourceToDesc1:2f}')

def preprocessing(scenario):
    f = open(scenario, 'r', encoding='utf-8')
    rdr = csv.reader(f)
    data = {}
    for i, line in enumerate(rdr):
        if i == 0:
            current_id = '0'
            continue
            
        id = str(line[0])
        if current_id != id:
            data[id] = {"xy" : [], "time" : []}
            current_id = id

        xy = [round(float(line[4]), 1), round(float(line[5]), 1)]
        time = int(line[2])
        data[id]["xy"].append(xy)
        data[id]["time"].append(time)
    
    return data

# vehicle to vehicle
config = {
    'datapath': f'./dataset/INTERACTION-Dataset-TC-v1_0/recorded_trackfiles/TC_BGR_Intersection_VA/',
    'index': ['id', 'x', 'y'],
    'savepath': f'./te/DR_CHN_Merging_ZS/te/'
}

# select scenario
scenario = config["datapath"] + 'vehicle_tracks_000.csv'
data = preprocessing(scenario)

data.keys()

# computeTE
car1 = "1"
car2 = "2"

computeTE(data, [], car1, car2)

# pedestrian to vehicle
config = dict2(**{
    'datapath': f'./interaction-dataset/recorded_trackfiles/DR_USA_Roundabout_EP/',
    'index': ['id', 'x', 'y'],
    'savepath': f'./te/DR_CHN_Merging_ZS/'
})

# select scenario
scenario = config.datapath + 'vehicle_tracks_000.csv'
data = preprocessing(scenario)

scenario_p = config.datapath + 'pedestrian_tracks_000.csv'
data_p = preprocessing(scenario_p)

# computeTE
source = "P4"
desc = "6"
computeTE(data_p, data, source, desc)
