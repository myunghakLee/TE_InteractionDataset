# -*- coding: utf-8 -*-
"""computeTE_interaction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZTWfpXyGY-UMBbR7oyNs4LASfLvfCXQz
"""


import matplotlib.pyplot as plt
from sys import platform
from tqdm import tqdm
import pandas as pd
from jpype import *
import numpy as np
import pickle
import glob
import csv
import os


# +
def preprocessing(scenario):
    df = pd.read_csv(scenario, index_col = False)
    ped_sceraio = scenario.replace("vehicle_tracks_", "pedestrian_tracks_")
    print(ped_sceraio)
    df_ped = []
    try:# pedistrian 정보가 있으면 읽어옴
        df_ped = pd.read_csv(ped_sceraio, index_col = False)
    except FileNotFoundError:
        print("SS")
    
#     df = df.sort_values('timestamp_ms')
    data = {}
    new_id = 0
    
    df['x'] = pd.to_numeric(df['x'])
    df['y'] = pd.to_numeric(df['y'])
    df['timestamp_ms'] = pd.to_numeric(df['timestamp_ms'])
#     df['track_id'] = pd.to_numeric(df['track_id'])

    min_x = min(df['x'])
    min_y = min(df['y'])

    min_x = 950
    min_y = 950
    
    data['normalize_xy'] = [min_x, min_y]
    data['agent'] = {}
    for i in range(len(df)):
        id = str(df['track_id'][i])
        try:
            data['agent'][id]["xy"].append([df['x'][i]-min_x, df['y'][i]-min_y])
            data['agent'][id]["time"].append(int(df['timestamp_ms'][i]))
        except KeyError:
            data['agent'][id] = {}
            data['agent'][id]["xy"] = [[df['x'][i]-min_x, df['y'][i]-min_y]]
            data['agent'][id]["time"] = [int(df['timestamp_ms'][i])]
            data['agent'][id]["id"] = int(new_id)
            data['agent'][id]["old_id"] = id
            data['agent'][id]["type"] = df['agent_type'][i]
            new_id += 1
  

    for i in range(len(df_ped)):
        id = str(df_ped['track_id'][i])
        try:
            data['agent'][id]["xy"].append([df_ped['x'][i]-min_x, df_ped['y'][i]-min_y])
            data['agent'][id]["time"].append(int(df_ped['timestamp_ms'][i]))
        except KeyError:
            data['agent'][id] = {}
            data['agent'][id]["xy"] = [[df_ped['x'][i]-min_x, df_ped['y'][i]-min_y]]
            data['agent'][id]["time"] = [int(df_ped['timestamp_ms'][i])]
            data['agent'][id]["id"] = int(new_id)
            data['agent'][id]["old_id"] = id
            data['agent'][id]["type"] = df_ped['agent_type'][i]
            new_id += 1
    
    return data


# -

class calc_TE():
    def __init__(self, num = "6"):
        jarLocation = "./infodynamics.jar"
        if not os.path.isfile(jarLocation):
            exit("infodynamics.jar not found (expected at " + os.path.abspath(
                jarLocation) + ") - are you running from demos/python?")
        # Start the JVM (add the "-Xmx" option with say 1024M if you get crashes due to not enough memory space)
        startJVM(getDefaultJVMPath(), "-ea", "-Djava.class.path=" + jarLocation)


        teCalcClass = JPackage("infodynamics.measures.continuous.kraskov").TransferEntropyCalculatorMultiVariateKraskov

        self.teCalc = teCalcClass()

        self.teCalc.setProperty(teCalcClass.PROP_AUTO_EMBED_METHOD, teCalcClass.AUTO_EMBED_METHOD_RAGWITZ)
        #teCalc.setProperty(teCalcClass.PROP_AUTO_EMBED_METHOD,  teCalcClass.AUTO_EMBED_METHOD_MAX_CORR_AIS_DEST_ONLY)
        #  b. Search range for embedding dimension (k) and delay (tau)
        self.teCalc.setProperty(teCalcClass.PROP_K_SEARCH_MAX, num)
        self.teCalc.setProperty(teCalcClass.PROP_TAU_SEARCH_MAX, num)

        self.teCalc.initialise(2, 2)
        
        

    def computeTE(self, data_source, data_desc):
        self.teCalc.setObservations(data_source, data_desc)
        teSourceToDesc = self.teCalc.computeAverageLocalOfObservations()

        self.teCalc.setObservations(data_desc, data_source)
        teDescToSource = self.teCalc.computeAverageLocalOfObservations()

#         print("source to desc : ", teSourceToDesc)
#         print("desc to source : ", teDescToSource)
        return teSourceToDesc, teDescToSource    

